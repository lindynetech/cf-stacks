---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Varnish Apache Proxy Stack'
Parameters:
  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: sysops-key
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-2ed19c41'
    'eu-west-3':
      AMI: 'ami-c8a017b5'
    'eu-west-2':
      AMI: 'ami-e3051987'
    'eu-west-1':
      AMI: 'ami-760aaa0f'
    'ap-northeast-2':
      AMI: 'ami-fc862292'
    'ap-northeast-1':
      AMI: 'ami-2803ac4e'
    'sa-east-1':
      AMI: 'ami-1678037a'
    'ca-central-1':
      AMI: 'ami-ef3b838b'
    'ap-southeast-1':
      AMI: 'ami-dd7935be'
    'ap-southeast-2':
      AMI: 'ami-1a668878'
    'eu-central-1':
      AMI: 'ami-e28d098d'
    'us-east-1':
      AMI: 'ami-6057e21a'
    'us-east-2':
      AMI: 'ami-aa1b34cf'
    'us-west-1':
      AMI: 'ami-1a033c7a'
    'us-west-2':
      AMI: 'ami-32d8124a'

Resources:
  varnishVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: App
          Value: Varnish

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      {}

  VPCIGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref varnishVPC

  # BastionHost Resources
  SubnetPublicBH:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref varnishVPC
      CidrBlock: 10.0.1.0/24

  RouteTablePublicBH:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref varnishVPC

  RouteTableAssocPublicBH:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicBH
      RouteTableId: !Ref RouteTablePublicBH

  RoutePublicBHToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublicBH
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
    DependsOn: VPCIGWAttachment   
  
  NetworkAclPublicBH:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref varnishVPC

  SubnetNetworkAclAssociationPublicBH:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicBH
      NetworkAclId: !Ref NetworkAclPublicBH

  NetworkAclEntryInPublicBHSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      PortRange:
        From: 22
        To: 22
      NetworkAclId: !Ref NetworkAclPublicBH
      RuleAction: 'allow'
      CidrBlock: 0.0.0.0/0
      Egress: false
      RuleNumber: 100
      Protocol: 6

  NetworkAclEntryInPublicBHEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: String
      Egress: true
      Icmp:
        Icmp
      Ipv6CidrBlock: String
      NetworkAclId: String #required
      PortRange:
        PortRange
      Protocol: Integer #required
      RuleAction: String #required
      RuleNumber: Integer #required

  NetworkAclEntryOutPublicBHSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: String
      Egress: false
      Icmp:
        Icmp
      Ipv6CidrBlock: String
      NetworkAclId: String #required
      PortRange:
        PortRange
      Protocol: Integer #required
      RuleAction: String #required
      RuleNumber: Integer #required

  NetworkAclEntryOutPublicBHEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: String
      Egress: Boolean
      Icmp:
        Icmp
      Ipv6CidrBlock: String
      NetworkAclId: String #required
      PortRange:
        PortRange
      Protocol: Integer #required
      RuleAction: String #required
      RuleNumber: Integer #required

BestionHost:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro
      SecurityGroupIds:
        - sg-id
      UserData: !Base64 |
        #!/bin/bash -ex
        # put your script here
      Tags:
        - Key: key
          Value: value
